{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joha\\\\Desktop\\\\dcake1\\\\DreamCakeFront\\\\src\\\\components\\\\Pedidos\\\\Pedidos.jsx\";\nimport React, { useState } from 'react';\nimport \"./style.scss\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet scene, renderer, camera, container; //controls\n\nvar controls; //html elements\n\nvar colorselection = \"green\";\n\nfunction init() {\n  var SCREEN_WIDTH = window.innerWidth,\n      SCREEN_HEIGHT = window.innerHeight;\n  SCREEN_WIDTH -= 200; //        SCREEN_HEIGHT -= 100;\n  // create a scene, that will hold all our elements such as objects, cameras and lights.\n\n  scene = new THREE.Scene(); // create a camera, which defines where we're looking at.\n\n  camera = new THREE.PerspectiveCamera(45, SCREEN_WIDTH / SCREEN_HEIGHT, 0.1, 1000); // create a render, sets the background color and the size\n\n  renderer = new THREE.WebGLRenderer();\n  renderer.setClearColor(0x000000, 1.0);\n  renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT); // position and point the camera to the center of the scene\n\n  camera.position.x = 0;\n  camera.position.y = 30;\n  camera.position.z = 40;\n  camera.lookAt(scene.position); // add the output of the renderer to the html element\n\n  document.body.appendChild(renderer.domElement); // attach div element to variable to contain the renderer\n\n  container = document.getElementById('ThreeJS'); // attach renderer to the container div\n\n  container.appendChild(renderer.domElement);\n}\n\nfunction floor() {\n  ///////////\n  // FLOOR //\n  ///////////\n  if (colorselection == \"green\") var floorTexture = new THREE.ImageUtils.loadTexture('green.jpg');else if (colorselection == \"brown\")\n    /*go with 2 for now*/\n    var floorTexture = new THREE.ImageUtils.loadTexture('brown.png');\n  floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\n  floorTexture.repeat.set(20, 20); // DoubleSide: render texture on both sides of mesh\n\n  var floorMaterial = new THREE.MeshBasicMaterial({\n    map: floorTexture,\n    side: THREE.DoubleSide\n  });\n  var floorGeometry = new THREE.PlaneGeometry(110, 110, 1, 1);\n  var floor = new THREE.Mesh(floorGeometry, floorMaterial);\n  floor.position.y = -0.5;\n  floor.rotation.x = Math.PI / 2;\n  scene.add(floor);\n  animate();\n} //scheduler loop\n\n\nfunction myfunction() {\n  colorselection = document.getElementById(\"mydropdownlist\").value;\n  console.log(\"clicked on '\" + colorselection + \"'\");\n  floor();\n} // calls the init function when the window is done loading.\n\n\nwindow.onload = init;\n\nfunction animate() {\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n\nfunction Pedido() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Pedido\",\n    children: \"init()\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n\n_c = Pedido;\nexport default Pedido;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pedido\");","map":{"version":3,"sources":["C:/Users/joha/Desktop/dcake1/DreamCakeFront/src/components/Pedidos/Pedidos.jsx"],"names":["React","useState","THREE","scene","renderer","camera","container","controls","colorselection","init","SCREEN_WIDTH","window","innerWidth","SCREEN_HEIGHT","innerHeight","Scene","PerspectiveCamera","WebGLRenderer","setClearColor","setSize","position","x","y","z","lookAt","document","body","appendChild","domElement","getElementById","floor","floorTexture","ImageUtils","loadTexture","wrapS","wrapT","RepeatWrapping","repeat","set","floorMaterial","MeshBasicMaterial","map","side","DoubleSide","floorGeometry","PlaneGeometry","Mesh","rotation","Math","PI","add","animate","myfunction","value","console","log","onload","render","requestAnimationFrame","Pedido"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport \"./style.scss\";\r\nimport * as THREE from \"three\";\r\n\r\nlet scene, renderer, camera,container\r\n\r\n\r\n\r\n\r\n\r\n//controls\r\nvar controls;\r\n\r\n//html elements\r\nvar colorselection = \"green\";\r\n\r\nfunction init() {\r\n    var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\r\n    SCREEN_WIDTH-=200;\r\n//        SCREEN_HEIGHT -= 100;\r\n\r\n    // create a scene, that will hold all our elements such as objects, cameras and lights.\r\n    scene = new THREE.Scene();\r\n\r\n    // create a camera, which defines where we're looking at.\r\n    camera = new THREE.PerspectiveCamera(45, SCREEN_WIDTH / SCREEN_HEIGHT, 0.1, 1000);\r\n\r\n    // create a render, sets the background color and the size\r\n    renderer = new THREE.WebGLRenderer();\r\n    renderer.setClearColor(0x000000, 1.0);\r\n    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\r\n\r\n    // position and point the camera to the center of the scene\r\n    camera.position.x = 0;\r\n    camera.position.y = 30;\r\n    camera.position.z = 40;\r\n    camera.lookAt(scene.position);\r\n\r\n    // add the output of the renderer to the html element\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    // attach div element to variable to contain the renderer\r\n    container = document.getElementById( 'ThreeJS' );\r\n\r\n    // attach renderer to the container div\r\n    container.appendChild( renderer.domElement );\r\n}\r\n\r\nfunction floor()\r\n{\r\n    ///////////\r\n    // FLOOR //\r\n    ///////////\r\n\r\n    if(colorselection == \"green\")\r\n        var floorTexture = new THREE.ImageUtils.loadTexture( 'green.jpg' );\r\n    else if(colorselection == \"brown\")/*go with 2 for now*/\r\n        var floorTexture = new THREE.ImageUtils.loadTexture( 'brown.png' );\r\n    floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    floorTexture.repeat.set( 20, 20 );\r\n    // DoubleSide: render texture on both sides of mesh\r\n    var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );\r\n    var floorGeometry = new THREE.PlaneGeometry(110, 110, 1, 1);\r\n    var floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n    floor.position.y = -0.5;\r\n    floor.rotation.x = Math.PI / 2;\r\n    scene.add(floor);\r\n\r\n    animate();\r\n}\r\n\r\n//scheduler loop\r\n\r\n\r\nfunction myfunction()\r\n{\r\n    colorselection = document.getElementById(\"mydropdownlist\").value;\r\n    console.log(\"clicked on '\"+ colorselection + \"'\")\r\n    floor();\r\n}\r\n\r\n// calls the init function when the window is done loading.\r\nwindow.onload = init;\r\n\r\n\r\nfunction animate() {\r\n  renderer.render(scene,camera)\r\n  requestAnimationFrame(animate)\r\n}\r\n\r\nfunction Pedido() {\r\n  return <div className=\"Pedido\">init()</div>\r\n}\r\n\r\nexport default Pedido;\r\n    "]},"metadata":{},"sourceType":"module"}