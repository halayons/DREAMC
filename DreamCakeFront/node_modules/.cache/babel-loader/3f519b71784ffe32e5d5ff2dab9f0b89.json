{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joha\\\\Desktop\\\\dcake1\\\\DreamCakeFront\\\\src\\\\components\\\\Pedidos\\\\Pedidos.jsx\";\nimport React, { useState, component } from 'react';\nimport \"./style.scss\";\nimport * as THREE from \"three\";\nimport { render } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet scene, renderer, camera, container;\nvar controls; //html elements\n\nvar colorselection = \"green\";\n\nclass Pedido extends React.Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.state = {\n      value: 'green'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } //controls\n\n\n  init() {\n    var SCREEN_WIDTH = window.innerWidth,\n        SCREEN_HEIGHT = window.innerHeight;\n    SCREEN_WIDTH -= 200; //        SCREEN_HEIGHT -= 100;\n    // create a scene, that will hold all our elements such as objects, cameras and lights.\n\n    scene = new THREE.Scene(); // create a camera, which defines where we're looking at.\n\n    camera = new THREE.PerspectiveCamera(45, SCREEN_WIDTH / SCREEN_HEIGHT, 0.1, 1000); // create a render, sets the background color and the size\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0x000000, 1.0);\n    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT); // position and point the camera to the center of the scene\n\n    camera.position.x = 0;\n    camera.position.y = 30;\n    camera.position.z = 40;\n    camera.lookAt(scene.position); // add the output of the renderer to the html element\n\n    document.body.appendChild(renderer.domElement); // attach div element to variable to contain the renderer\n\n    container = document.getElementById('ThreeJS'); // attach renderer to the container div\n    //container.appendChild( renderer.domElement );\n  }\n\n  floor() {\n    ///////////\n    // FLOOR //\n    ///////////\n    if (colorselection == \"green\") //var floorTexture = new THREE.ImageUtils.loadTexture( 'green.jpg' );\n      console.log(\"verde\");else if (colorselection == \"brown\")\n      /*go with 2 for now*/\n      console.log(\"vcafe\"); // floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\n    //floorTexture.repeat.set( 20, 20 );\n    // DoubleSide: render texture on both sides of mesh\n    //var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );\n    //var floorGeometry = new THREE.PlaneGeometry(110, 110, 1, 1);\n    //var floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    //floor.position.y = -0.5;\n    //floor.rotation.x = Math.PI / 2;\n    //scene.add(floor);\n\n    return renderer.domElement;\n  } //scheduler loop\n\n\n  myfunction() {\n    colorselection = this.state.value;\n    console.log(\"clicked on '\" + colorselection + \"'\"); //floor();\n  }\n\n  animate() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(this.animate);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('Your favorite flavor is: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"Render\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"mydropdownlist\",\n          value: this.state.value,\n          onChange: this.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"green\",\n            children: \"green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"brown\",\n            children: \"brown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Pedido;","map":{"version":3,"sources":["C:/Users/joha/Desktop/dcake1/DreamCakeFront/src/components/Pedidos/Pedidos.jsx"],"names":["React","useState","component","THREE","render","scene","renderer","camera","container","controls","colorselection","Pedido","Component","constructor","props","animate","bind","state","value","handleChange","handleSubmit","init","SCREEN_WIDTH","window","innerWidth","SCREEN_HEIGHT","innerHeight","Scene","PerspectiveCamera","WebGLRenderer","setClearColor","setSize","position","x","y","z","lookAt","document","body","appendChild","domElement","getElementById","floor","console","log","myfunction","requestAnimationFrame","event","setState","target","alert","preventDefault"],"mappings":"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","sourcesContent":["import React, {useState, component} from 'react';\r\n\r\nimport \"./style.scss\";\r\nimport * as THREE from \"three\";\r\nimport { render } from '@testing-library/react';\r\n\r\nlet scene, renderer, camera,container;\r\nvar controls;\r\n\r\n//html elements\r\nvar colorselection = \"green\";\r\n\r\nclass Pedido extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.animate=this.animate.bind(this);\r\n    this.state = {value: 'green'};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//controls\r\n\r\ninit() {\r\n    var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\r\n    SCREEN_WIDTH-=200;\r\n//        SCREEN_HEIGHT -= 100;\r\n\r\n    // create a scene, that will hold all our elements such as objects, cameras and lights.\r\n    scene = new THREE.Scene();\r\n\r\n    // create a camera, which defines where we're looking at.\r\n    camera = new THREE.PerspectiveCamera(45, SCREEN_WIDTH / SCREEN_HEIGHT, 0.1, 1000);\r\n\r\n    // create a render, sets the background color and the size\r\n    renderer = new THREE.WebGLRenderer();\r\n    renderer.setClearColor(0x000000, 1.0);\r\n    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\r\n\r\n    // position and point the camera to the center of the scene\r\n    camera.position.x = 0;\r\n    camera.position.y = 30;\r\n    camera.position.z = 40;\r\n    camera.lookAt(scene.position);\r\n\r\n    // add the output of the renderer to the html element\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    // attach div element to variable to contain the renderer\r\n    container = document.getElementById( 'ThreeJS' );\r\n\r\n    // attach renderer to the container div\r\n    //container.appendChild( renderer.domElement );\r\n}\r\n\r\nfloor()\r\n{\r\n    ///////////\r\n    // FLOOR //\r\n    ///////////\r\n\r\n    if(colorselection == \"green\")\r\n        //var floorTexture = new THREE.ImageUtils.loadTexture( 'green.jpg' );\r\n        console.log(\"verde\");\r\n    else if(colorselection == \"brown\")/*go with 2 for now*/\r\n    console.log(\"vcafe\");\r\n   // floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;\r\n    //floorTexture.repeat.set( 20, 20 );\r\n    // DoubleSide: render texture on both sides of mesh\r\n    //var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );\r\n    //var floorGeometry = new THREE.PlaneGeometry(110, 110, 1, 1);\r\n    //var floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n    //floor.position.y = -0.5;\r\n    //floor.rotation.x = Math.PI / 2;\r\n    //scene.add(floor);\r\n\r\n    return renderer.domElement;\r\n}\r\n\r\n//scheduler loop\r\n\r\n\r\nmyfunction()\r\n{\r\n    colorselection =    this.state.value;\r\n\r\n\r\n    console.log(\"clicked on '\"+ colorselection + \"'\")\r\n    //floor();\r\n}\r\n\r\n\r\n\r\n\r\nanimate() {\r\n  renderer.render(scene,camera)\r\n  requestAnimationFrame(this.animate)\r\n}\r\n\r\n\r\n\r\n  \r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('Your favorite flavor is: ' + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n  render(){\r\n  return(\r\n    <div id=\"Render\">\r\n  <form onSubmit={this.handleSubmit}>\r\n\r\n<select id=\"mydropdownlist\" value={this.state.value} onChange={this.handleChange}>\r\n    <option value=\"green\">green</option>\r\n    <option value=\"brown\">brown</option>\r\n</select>\r\n</form> \r\n</div>\r\n  )\r\n  \r\n}\r\n}\r\n\r\nexport default Pedido;\r\n    "]},"metadata":{},"sourceType":"module"}