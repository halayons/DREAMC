{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var BACK,\n      COPLANAR,\n      EPSILON,\n      FRONT,\n      SPANNING,\n      Timelimit,\n      returning,\n      bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      slice = [].slice,\n      extend = function (child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  EPSILON = 1e-5;\n  COPLANAR = 0;\n  FRONT = 1;\n  BACK = 2;\n  SPANNING = 3;\n\n  returning = function (value, fn) {\n    fn();\n    return value;\n  };\n\n  Timelimit = function () {\n    function Timelimit(timeout, progress) {\n      this.timeout = timeout;\n      this.progress = progress;\n      this.doTask = bind(this.doTask, this);\n      this.finish = bind(this.finish, this);\n      this.start = bind(this.start, this);\n      this.check = bind(this.check, this);\n      \"NOTHING\";\n    }\n\n    Timelimit.prototype.check = function () {\n      var elapsed;\n\n      if (this.started == null) {\n        return;\n      }\n\n      return returning(elapsed = Date.now() - this.started, function (_this) {\n        return function () {\n          var ref, ref1, ref2;\n\n          if ((ref = elapsed >= _this.timeout) != null ? ref : 2e308) {\n            throw new Error(\"Timeout reached: \" + elapsed + \"/\" + _this.timeout + \", \" + ((ref1 = _this.tasks) != null ? ref1 : 0) + \" tasks unfinished \" + ((ref2 = _this.done) != null ? ref2 : 0) + \" finished.\");\n          }\n        };\n      }(this));\n    };\n\n    Timelimit.prototype.start = function () {\n      if (this.started == null) {\n        this.started = Date.now();\n      }\n\n      if (this.tasks == null) {\n        this.tasks = 0;\n      }\n\n      if (this.total == null) {\n        this.total = 0;\n      }\n\n      this.total += 1;\n      this.tasks += 1;\n      return this.check();\n    };\n\n    Timelimit.prototype.finish = function () {\n      var elapsed;\n\n      if (this.tasks != null && this.tasks < 1) {\n        throw new Error(\"Finished more tasks than started\");\n      }\n\n      this.tasks -= 1;\n      elapsed = this.check();\n\n      if (this.done == null) {\n        this.done = 0;\n      }\n\n      this.done += 1;\n\n      if (this.progress != null) {\n        this.progress(this.done, this.total);\n      }\n\n      if (this.tasks === 0) {\n        \"Finished \" + this.done + \" tasks in \" + elapsed + \"/\" + this.timeout + \" ms\";\n        return this.started = this.done = this.total = void 0;\n      }\n    };\n\n    Timelimit.prototype.doTask = function (block) {\n      var result;\n      this.start();\n      result = block();\n      this.finish();\n      return result;\n    };\n\n    return Timelimit;\n  }();\n\n  window.ThreeBSP = function () {\n    function ThreeBSP(treeIsh, matrix1, options) {\n      var base, ref, ref1, ref2, ref3;\n      this.matrix = matrix1;\n      this.options = options != null ? options : {};\n      this.intersect = bind(this.intersect, this);\n      this.union = bind(this.union, this);\n      this.subtract = bind(this.subtract, this);\n      this.toGeometry = bind(this.toGeometry, this);\n      this.toMesh = bind(this.toMesh, this);\n      this.toTree = bind(this.toTree, this);\n      this.withTimer = bind(this.withTimer, this);\n\n      if (this.matrix != null && !(this.matrix instanceof THREE.Matrix4)) {\n        this.options = this.matrix;\n        this.matrix = void 0;\n      }\n\n      if (this.options == null) {\n        this.options = {};\n      }\n\n      if (this.matrix == null) {\n        this.matrix = new THREE.Matrix4();\n      }\n\n      if ((base = this.options).timer == null) {\n        base.timer = new Timelimit((ref = (ref1 = this.options.timer) != null ? ref1.timeout : void 0) != null ? ref : this.options.timeout, (ref2 = (ref3 = this.options.timer) != null ? ref3.progress : void 0) != null ? ref2 : this.options.progress);\n      }\n\n      this.tree = this.toTree(treeIsh);\n    }\n\n    ThreeBSP.prototype.withTimer = function (new_timer, block) {\n      var old_timer;\n      old_timer = this.options.timer;\n\n      try {\n        this.options.timer = new_timer;\n        return block();\n      } finally {\n        this.options.timer = old_timer;\n      }\n    };\n\n    ThreeBSP.prototype.toTree = function (treeIsh) {\n      var face, fn1, geometry, i, k, len, polygons, ref;\n\n      if (treeIsh instanceof ThreeBSP.Node) {\n        return treeIsh;\n      }\n\n      polygons = [];\n      geometry = treeIsh instanceof THREE.Geometry ? treeIsh : treeIsh instanceof THREE.Mesh ? (treeIsh.updateMatrix(), this.matrix = treeIsh.matrix.clone(), treeIsh.geometry) : void 0;\n      ref = geometry.faces;\n\n      fn1 = function (_this) {\n        return function (face, i) {\n          var faceVertexUvs, idx, l, len1, polygon, ref1, ref2, vIndex, vName, vertex;\n          faceVertexUvs = (ref1 = geometry.faceVertexUvs) != null ? ref1[0][i] : void 0;\n\n          if (faceVertexUvs == null) {\n            faceVertexUvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];\n          }\n\n          polygon = new ThreeBSP.Polygon();\n          ref2 = ['a', 'b', 'c', 'd'];\n\n          for (vIndex = l = 0, len1 = ref2.length; l < len1; vIndex = ++l) {\n            vName = ref2[vIndex];\n\n            if ((idx = face[vName]) != null) {\n              vertex = geometry.vertices[idx];\n              vertex = new ThreeBSP.Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[0], new THREE.Vector2(faceVertexUvs[vIndex].x, faceVertexUvs[vIndex].y));\n              vertex.applyMatrix4(_this.matrix);\n              polygon.vertices.push(vertex);\n            }\n          }\n\n          return polygons.push(polygon.calculateProperties());\n        };\n      }(this);\n\n      for (i = k = 0, len = ref.length; k < len; i = ++k) {\n        face = ref[i];\n        fn1(face, i);\n      }\n\n      return new ThreeBSP.Node(polygons, this.options);\n    };\n\n    ThreeBSP.prototype.toMesh = function (material) {\n      if (material == null) {\n        material = new THREE.MeshNormalMaterial();\n      }\n\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          var geometry, mesh;\n          geometry = _this.toGeometry();\n          return returning(mesh = new THREE.Mesh(geometry, material), function () {\n            mesh.position.setFromMatrixPosition(_this.matrix);\n            return mesh.rotation.setFromRotationMatrix(_this.matrix);\n          });\n        };\n      }(this));\n    };\n\n    ThreeBSP.prototype.toGeometry = function () {\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          var geometry, matrix;\n          matrix = new THREE.Matrix4().getInverse(_this.matrix);\n          return returning(geometry = new THREE.Geometry(), function () {\n            var k, len, polygon, ref, results;\n            ref = _this.tree.allPolygons();\n            results = [];\n\n            for (k = 0, len = ref.length; k < len; k++) {\n              polygon = ref[k];\n              results.push(_this.options.timer.doTask(function () {\n                var face, idx, l, polyVerts, ref1, results1, v, vertUvs, verts;\n\n                polyVerts = function () {\n                  var l, len1, ref1, results1;\n                  ref1 = polygon.vertices;\n                  results1 = [];\n\n                  for (l = 0, len1 = ref1.length; l < len1; l++) {\n                    v = ref1[l];\n                    results1.push(v.clone().applyMatrix4(matrix));\n                  }\n\n                  return results1;\n                }();\n\n                results1 = [];\n\n                for (idx = l = 2, ref1 = polyVerts.length; 2 <= ref1 ? l < ref1 : l > ref1; idx = 2 <= ref1 ? ++l : --l) {\n                  verts = [polyVerts[0], polyVerts[idx - 1], polyVerts[idx]];\n\n                  vertUvs = function () {\n                    var len1, m, ref2, ref3, results2;\n                    results2 = [];\n\n                    for (m = 0, len1 = verts.length; m < len1; m++) {\n                      v = verts[m];\n                      results2.push(new THREE.Vector2((ref2 = v.uv) != null ? ref2.x : void 0, (ref3 = v.uv) != null ? ref3.y : void 0));\n                    }\n\n                    return results2;\n                  }();\n\n                  face = function (func, args, ctor) {\n                    ctor.prototype = func.prototype;\n                    var child = new ctor(),\n                        result = func.apply(child, args);\n                    return Object(result) === result ? result : child;\n                  }(THREE.Face3, slice.call(function () {\n                    var len1, m, results2;\n                    results2 = [];\n\n                    for (m = 0, len1 = verts.length; m < len1; m++) {\n                      v = verts[m];\n                      results2.push(geometry.vertices.push(v) - 1);\n                    }\n\n                    return results2;\n                  }()).concat([polygon.normal.clone()]), function () {});\n\n                  geometry.faces.push(face);\n                  results1.push(geometry.faceVertexUvs[0].push(vertUvs));\n                }\n\n                return results1;\n              }));\n            }\n\n            return results;\n          });\n        };\n      }(this));\n    };\n\n    ThreeBSP.prototype.subtract = function (other) {\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          return other.withTimer(_this.options.timer, function () {\n            var ref, them, us;\n            ref = [_this.tree.clone(), other.tree.clone()], us = ref[0], them = ref[1];\n            us.invert().clipTo(them);\n            them.clipTo(us).invert().clipTo(us).invert();\n            return new ThreeBSP(us.build(them.allPolygons()).invert(), _this.matrix, _this.options);\n          });\n        };\n      }(this));\n    };\n\n    ThreeBSP.prototype.union = function (other) {\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          return other.withTimer(_this.options.timer, function () {\n            var ref, them, us;\n            ref = [_this.tree.clone(), other.tree.clone()], us = ref[0], them = ref[1];\n            us.clipTo(them);\n            them.clipTo(us).invert().clipTo(us).invert();\n            return new ThreeBSP(us.build(them.allPolygons()), _this.matrix, _this.options);\n          });\n        };\n      }(this));\n    };\n\n    ThreeBSP.prototype.intersect = function (other) {\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          return other.withTimer(_this.options.timer, function () {\n            var ref, them, us;\n            ref = [_this.tree.clone(), other.tree.clone()], us = ref[0], them = ref[1];\n            them.clipTo(us.invert()).invert().clipTo(us.clipTo(them));\n            return new ThreeBSP(us.build(them.allPolygons()).invert(), _this.matrix, _this.options);\n          });\n        };\n      }(this));\n    };\n\n    return ThreeBSP;\n  }();\n\n  ThreeBSP.Vertex = function (superClass) {\n    extend(Vertex, superClass);\n\n    function Vertex(x, y, z, normal, uv) {\n      this.normal = normal != null ? normal : new THREE.Vector3();\n      this.uv = uv != null ? uv : new THREE.Vector2();\n      this.interpolate = bind(this.interpolate, this);\n      this.lerp = bind(this.lerp, this);\n\n      Vertex.__super__.constructor.call(this, x, y, z);\n    }\n\n    Vertex.prototype.clone = function () {\n      return new ThreeBSP.Vertex(this.x, this.y, this.z, this.normal.clone(), this.uv.clone());\n    };\n\n    Vertex.prototype.lerp = function (v, alpha) {\n      return returning(Vertex.__super__.lerp.apply(this, arguments), function (_this) {\n        return function () {\n          _this.uv.add(v.uv.clone().sub(_this.uv).multiplyScalar(alpha));\n\n          return _this.normal.lerp(v, alpha);\n        };\n      }(this));\n    };\n\n    Vertex.prototype.interpolate = function () {\n      var args, ref;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return (ref = this.clone()).lerp.apply(ref, args);\n    };\n\n    return Vertex;\n  }(THREE.Vector3);\n\n  ThreeBSP.Polygon = function () {\n    function Polygon(vertices, normal, w) {\n      this.vertices = vertices != null ? vertices : [];\n      this.normal = normal;\n      this.w = w;\n      this.subdivide = bind(this.subdivide, this);\n      this.tessellate = bind(this.tessellate, this);\n      this.classifySide = bind(this.classifySide, this);\n      this.classifyVertex = bind(this.classifyVertex, this);\n      this.invert = bind(this.invert, this);\n      this.clone = bind(this.clone, this);\n      this.calculateProperties = bind(this.calculateProperties, this);\n\n      if (this.vertices.length) {\n        this.calculateProperties();\n      }\n    }\n\n    Polygon.prototype.calculateProperties = function () {\n      return returning(this, function (_this) {\n        return function () {\n          var a, b, c, ref;\n          ref = _this.vertices, a = ref[0], b = ref[1], c = ref[2];\n          _this.normal = b.clone().sub(a).cross(c.clone().sub(a)).normalize();\n          return _this.w = _this.normal.clone().dot(a);\n        };\n      }(this));\n    };\n\n    Polygon.prototype.clone = function () {\n      var v;\n      return new ThreeBSP.Polygon(function () {\n        var k, len, ref, results;\n        ref = this.vertices;\n        results = [];\n\n        for (k = 0, len = ref.length; k < len; k++) {\n          v = ref[k];\n          results.push(v.clone());\n        }\n\n        return results;\n      }.call(this), this.normal.clone(), this.w);\n    };\n\n    Polygon.prototype.invert = function () {\n      return returning(this, function (_this) {\n        return function () {\n          _this.normal.multiplyScalar(-1);\n\n          _this.w *= -1;\n          return _this.vertices.reverse();\n        };\n      }(this));\n    };\n\n    Polygon.prototype.classifyVertex = function (vertex) {\n      var side;\n      side = this.normal.dot(vertex) - this.w;\n\n      switch (false) {\n        case !(side < -EPSILON):\n          return BACK;\n\n        case !(side > EPSILON):\n          return FRONT;\n\n        default:\n          return COPLANAR;\n      }\n    };\n\n    Polygon.prototype.classifySide = function (polygon) {\n      var back, front, k, len, ref, ref1, tally, v;\n      ref = [0, 0], front = ref[0], back = ref[1];\n\n      tally = function (_this) {\n        return function (v) {\n          switch (_this.classifyVertex(v)) {\n            case FRONT:\n              return front += 1;\n\n            case BACK:\n              return back += 1;\n          }\n        };\n      }(this);\n\n      ref1 = polygon.vertices;\n\n      for (k = 0, len = ref1.length; k < len; k++) {\n        v = ref1[k];\n        tally(v);\n      }\n\n      if (front > 0 && back === 0) {\n        return FRONT;\n      }\n\n      if (front === 0 && back > 0) {\n        return BACK;\n      }\n\n      if (front === back && back === 0) {\n        return COPLANAR;\n      }\n\n      return SPANNING;\n    };\n\n    Polygon.prototype.tessellate = function (poly) {\n      var b, count, f, i, j, k, len, polys, ref, ref1, ref2, t, ti, tj, v, vi, vj;\n      ref = {\n        f: [],\n        b: [],\n        count: poly.vertices.length\n      }, f = ref.f, b = ref.b, count = ref.count;\n\n      if (this.classifySide(poly) !== SPANNING) {\n        return [poly];\n      }\n\n      ref1 = poly.vertices;\n\n      for (i = k = 0, len = ref1.length; k < len; i = ++k) {\n        vi = ref1[i];\n        vj = poly.vertices[j = (i + 1) % count];\n        ref2 = function () {\n          var l, len1, ref2, results;\n          ref2 = [vi, vj];\n          results = [];\n\n          for (l = 0, len1 = ref2.length; l < len1; l++) {\n            v = ref2[l];\n            results.push(this.classifyVertex(v));\n          }\n\n          return results;\n        }.call(this), ti = ref2[0], tj = ref2[1];\n\n        if (ti !== BACK) {\n          f.push(vi);\n        }\n\n        if (ti !== FRONT) {\n          b.push(vi);\n        }\n\n        if ((ti | tj) === SPANNING) {\n          t = (this.w - this.normal.dot(vi)) / this.normal.dot(vj.clone().sub(vi));\n          v = vi.interpolate(vj, t);\n          f.push(v);\n          b.push(v);\n        }\n      }\n\n      return returning(polys = [], function (_this) {\n        return function () {\n          if (f.length >= 3) {\n            polys.push(new ThreeBSP.Polygon(f));\n          }\n\n          if (b.length >= 3) {\n            return polys.push(new ThreeBSP.Polygon(b));\n          }\n        };\n      }(this));\n    };\n\n    Polygon.prototype.subdivide = function (polygon, coplanar_front, coplanar_back, front, back) {\n      var k, len, poly, ref, results, side;\n      ref = this.tessellate(polygon);\n      results = [];\n\n      for (k = 0, len = ref.length; k < len; k++) {\n        poly = ref[k];\n        side = this.classifySide(poly);\n\n        switch (side) {\n          case FRONT:\n            results.push(front.push(poly));\n            break;\n\n          case BACK:\n            results.push(back.push(poly));\n            break;\n\n          case COPLANAR:\n            if (this.normal.dot(poly.normal) > 0) {\n              results.push(coplanar_front.push(poly));\n            } else {\n              results.push(coplanar_back.push(poly));\n            }\n\n            break;\n\n          default:\n            throw new Error(\"BUG: Polygon of classification \" + side + \" in subdivision\");\n        }\n      }\n\n      return results;\n    };\n\n    return Polygon;\n  }();\n\n  ThreeBSP.Node = function () {\n    Node.prototype.clone = function () {\n      var node;\n      return returning(node = new ThreeBSP.Node(this.options), function (_this) {\n        return function () {\n          var ref;\n          node.divider = (ref = _this.divider) != null ? ref.clone() : void 0;\n          node.polygons = _this.options.timer.doTask(function () {\n            var k, len, p, ref1, results;\n            ref1 = _this.polygons;\n            results = [];\n\n            for (k = 0, len = ref1.length; k < len; k++) {\n              p = ref1[k];\n              results.push(p.clone());\n            }\n\n            return results;\n          });\n          node.front = _this.options.timer.doTask(function () {\n            var ref1;\n            return (ref1 = _this.front) != null ? ref1.clone() : void 0;\n          });\n          return node.back = _this.options.timer.doTask(function () {\n            var ref1;\n            return (ref1 = _this.back) != null ? ref1.clone() : void 0;\n          });\n        };\n      }(this));\n    };\n\n    function Node(polygons, options) {\n      this.options = options != null ? options : {};\n      this.clipTo = bind(this.clipTo, this);\n      this.clipPolygons = bind(this.clipPolygons, this);\n      this.invert = bind(this.invert, this);\n      this.allPolygons = bind(this.allPolygons, this);\n      this.isConvex = bind(this.isConvex, this);\n      this.build = bind(this.build, this);\n      this.clone = bind(this.clone, this);\n\n      if (polygons != null && !(polygons instanceof Array)) {\n        this.options = polygons;\n        polygons = void 0;\n      }\n\n      this.polygons = [];\n      this.options.timer.doTask(function (_this) {\n        return function () {\n          if (polygons != null && polygons.length) {\n            return _this.build(polygons);\n          }\n        };\n      }(this));\n    }\n\n    Node.prototype.build = function (polygons) {\n      return returning(this, function (_this) {\n        return function () {\n          var polys, results, side, sides;\n          sides = {\n            front: [],\n            back: []\n          };\n\n          if (_this.divider == null) {\n            _this.divider = polygons[0].clone();\n          }\n\n          _this.options.timer.doTask(function () {\n            var k, len, poly, results;\n            results = [];\n\n            for (k = 0, len = polygons.length; k < len; k++) {\n              poly = polygons[k];\n              results.push(_this.options.timer.doTask(function () {\n                return _this.divider.subdivide(poly, _this.polygons, _this.polygons, sides.front, sides.back);\n              }));\n            }\n\n            return results;\n          });\n\n          results = [];\n\n          for (side in sides) {\n            if (!hasProp.call(sides, side)) continue;\n            polys = sides[side];\n\n            if (polys.length) {\n              if (_this[side] == null) {\n                _this[side] = new ThreeBSP.Node(_this.options);\n              }\n\n              results.push(_this[side].build(polys));\n            } else {\n              results.push(void 0);\n            }\n          }\n\n          return results;\n        };\n      }(this));\n    };\n\n    Node.prototype.isConvex = function (polys) {\n      var inner, k, l, len, len1, outer;\n\n      for (k = 0, len = polys.length; k < len; k++) {\n        inner = polys[k];\n\n        for (l = 0, len1 = polys.length; l < len1; l++) {\n          outer = polys[l];\n\n          if (inner !== outer && outer.classifySide(inner) !== BACK) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    Node.prototype.allPolygons = function () {\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          var ref, ref1;\n          return _this.polygons.slice().concat(((ref1 = _this.front) != null ? ref1.allPolygons() : void 0) || []).concat(((ref = _this.back) != null ? ref.allPolygons() : void 0) || []);\n        };\n      }(this));\n    };\n\n    Node.prototype.invert = function () {\n      return returning(this, function (_this) {\n        return function () {\n          return _this.options.timer.doTask(function () {\n            var flipper, k, l, len, len1, poly, ref, ref1, ref2;\n            ref = _this.polygons;\n\n            for (k = 0, len = ref.length; k < len; k++) {\n              poly = ref[k];\n\n              _this.options.timer.doTask(function () {\n                return poly.invert();\n              });\n            }\n\n            ref1 = [_this.divider, _this.front, _this.back];\n\n            for (l = 0, len1 = ref1.length; l < len1; l++) {\n              flipper = ref1[l];\n\n              _this.options.timer.doTask(function () {\n                return flipper != null ? flipper.invert() : void 0;\n              });\n            }\n\n            return ref2 = [_this.back, _this.front], _this.front = ref2[0], _this.back = ref2[1], ref2;\n          });\n        };\n      }(this));\n    };\n\n    Node.prototype.clipPolygons = function (polygons) {\n      return this.options.timer.doTask(function (_this) {\n        return function () {\n          var back, front, k, len, poly;\n\n          if (!_this.divider) {\n            return polygons.slice();\n          }\n\n          front = [];\n          back = [];\n\n          for (k = 0, len = polygons.length; k < len; k++) {\n            poly = polygons[k];\n\n            _this.options.timer.doTask(function () {\n              return _this.divider.subdivide(poly, front, back, front, back);\n            });\n          }\n\n          if (_this.front) {\n            front = _this.front.clipPolygons(front);\n          }\n\n          if (_this.back) {\n            back = _this.back.clipPolygons(back);\n          }\n\n          if (_this.back) {\n            return front.concat(back);\n          } else {\n            return front;\n          }\n        };\n      }(this));\n    };\n\n    Node.prototype.clipTo = function (node) {\n      return returning(this, function (_this) {\n        return function () {\n          return _this.options.timer.doTask(function () {\n            var ref, ref1;\n            _this.polygons = node.clipPolygons(_this.polygons);\n\n            if ((ref = _this.front) != null) {\n              ref.clipTo(node);\n            }\n\n            return (ref1 = _this.back) != null ? ref1.clipTo(node) : void 0;\n          });\n        };\n      }(this));\n    };\n\n    return Node;\n  }();\n}).call(this);","map":{"version":3,"sources":["C:/Users/joha/Desktop/dcake1/DreamCakeFront/node_modules/threebsp/index.js"],"names":["BACK","COPLANAR","EPSILON","FRONT","SPANNING","Timelimit","returning","bind","fn","me","apply","arguments","slice","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","value","timeout","progress","doTask","finish","start","check","elapsed","started","Date","now","_this","ref","ref1","ref2","Error","tasks","done","total","block","result","window","ThreeBSP","treeIsh","matrix1","options","base","ref3","matrix","intersect","union","subtract","toGeometry","toMesh","toTree","withTimer","THREE","Matrix4","timer","tree","new_timer","old_timer","face","fn1","geometry","i","k","len","polygons","Node","Geometry","Mesh","updateMatrix","clone","faces","faceVertexUvs","idx","l","len1","polygon","vIndex","vName","vertex","Vector2","Polygon","length","vertices","Vertex","x","y","z","vertexNormals","applyMatrix4","push","calculateProperties","material","MeshNormalMaterial","mesh","position","setFromMatrixPosition","rotation","setFromRotationMatrix","getInverse","results","allPolygons","polyVerts","results1","v","vertUvs","verts","m","results2","uv","func","args","Object","Face3","concat","normal","other","them","us","invert","clipTo","build","superClass","Vector3","interpolate","lerp","alpha","add","sub","multiplyScalar","w","subdivide","tessellate","classifySide","classifyVertex","a","b","c","cross","normalize","dot","reverse","side","back","front","tally","poly","count","f","j","polys","t","ti","tj","vi","vj","coplanar_front","coplanar_back","node","divider","p","clipPolygons","isConvex","Array","sides","inner","outer","flipper"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var BACK, COPLANAR, EPSILON, FRONT, SPANNING, Timelimit, returning,\r\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n    slice = [].slice,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  EPSILON = 1e-5;\r\n\r\n  COPLANAR = 0;\r\n\r\n  FRONT = 1;\r\n\r\n  BACK = 2;\r\n\r\n  SPANNING = 3;\r\n\r\n  returning = function(value, fn) {\r\n    fn();\r\n    return value;\r\n  };\r\n\r\n  Timelimit = (function() {\r\n    function Timelimit(timeout, progress) {\r\n      this.timeout = timeout;\r\n      this.progress = progress;\r\n      this.doTask = bind(this.doTask, this);\r\n      this.finish = bind(this.finish, this);\r\n      this.start = bind(this.start, this);\r\n      this.check = bind(this.check, this);\r\n      \"NOTHING\";\r\n    }\r\n\r\n    Timelimit.prototype.check = function() {\r\n      var elapsed;\r\n      if (this.started == null) {\r\n        return;\r\n      }\r\n      return returning((elapsed = Date.now() - this.started), (function(_this) {\r\n        return function() {\r\n          var ref, ref1, ref2;\r\n          if ((ref = elapsed >= _this.timeout) != null ? ref : 2e308) {\r\n            throw new Error(\"Timeout reached: \" + elapsed + \"/\" + _this.timeout + \", \" + ((ref1 = _this.tasks) != null ? ref1 : 0) + \" tasks unfinished \" + ((ref2 = _this.done) != null ? ref2 : 0) + \" finished.\");\r\n          }\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Timelimit.prototype.start = function() {\r\n      if (this.started == null) {\r\n        this.started = Date.now();\r\n      }\r\n      if (this.tasks == null) {\r\n        this.tasks = 0;\r\n      }\r\n      if (this.total == null) {\r\n        this.total = 0;\r\n      }\r\n      this.total += 1;\r\n      this.tasks += 1;\r\n      return this.check();\r\n    };\r\n\r\n    Timelimit.prototype.finish = function() {\r\n      var elapsed;\r\n      if ((this.tasks != null) && this.tasks < 1) {\r\n        throw new Error(\"Finished more tasks than started\");\r\n      }\r\n      this.tasks -= 1;\r\n      elapsed = this.check();\r\n      if (this.done == null) {\r\n        this.done = 0;\r\n      }\r\n      this.done += 1;\r\n      if (this.progress != null) {\r\n        this.progress(this.done, this.total);\r\n      }\r\n      if (this.tasks === 0) {\r\n        \"Finished \" + this.done + \" tasks in \" + elapsed + \"/\" + this.timeout + \" ms\";\r\n        return this.started = this.done = this.total = void 0;\r\n      }\r\n    };\r\n\r\n    Timelimit.prototype.doTask = function(block) {\r\n      var result;\r\n      this.start();\r\n      result = block();\r\n      this.finish();\r\n      return result;\r\n    };\r\n\r\n    return Timelimit;\r\n\r\n  })();\r\n\r\n  window.ThreeBSP = (function() {\r\n    function ThreeBSP(treeIsh, matrix1, options) {\r\n      var base, ref, ref1, ref2, ref3;\r\n      this.matrix = matrix1;\r\n      this.options = options != null ? options : {};\r\n      this.intersect = bind(this.intersect, this);\r\n      this.union = bind(this.union, this);\r\n      this.subtract = bind(this.subtract, this);\r\n      this.toGeometry = bind(this.toGeometry, this);\r\n      this.toMesh = bind(this.toMesh, this);\r\n      this.toTree = bind(this.toTree, this);\r\n      this.withTimer = bind(this.withTimer, this);\r\n      if ((this.matrix != null) && !(this.matrix instanceof THREE.Matrix4)) {\r\n        this.options = this.matrix;\r\n        this.matrix = void 0;\r\n      }\r\n      if (this.options == null) {\r\n        this.options = {};\r\n      }\r\n      if (this.matrix == null) {\r\n        this.matrix = new THREE.Matrix4();\r\n      }\r\n      if ((base = this.options).timer == null) {\r\n        base.timer = new Timelimit((ref = (ref1 = this.options.timer) != null ? ref1.timeout : void 0) != null ? ref : this.options.timeout, (ref2 = (ref3 = this.options.timer) != null ? ref3.progress : void 0) != null ? ref2 : this.options.progress);\r\n      }\r\n      this.tree = this.toTree(treeIsh);\r\n    }\r\n\r\n    ThreeBSP.prototype.withTimer = function(new_timer, block) {\r\n      var old_timer;\r\n      old_timer = this.options.timer;\r\n      try {\r\n        this.options.timer = new_timer;\r\n        return block();\r\n      } finally {\r\n        this.options.timer = old_timer;\r\n      }\r\n    };\r\n\r\n    ThreeBSP.prototype.toTree = function(treeIsh) {\r\n      var face, fn1, geometry, i, k, len, polygons, ref;\r\n      if (treeIsh instanceof ThreeBSP.Node) {\r\n        return treeIsh;\r\n      }\r\n      polygons = [];\r\n      geometry = treeIsh instanceof THREE.Geometry ? treeIsh : treeIsh instanceof THREE.Mesh ? (treeIsh.updateMatrix(), this.matrix = treeIsh.matrix.clone(), treeIsh.geometry) : void 0;\r\n      ref = geometry.faces;\r\n      fn1 = (function(_this) {\r\n        return function(face, i) {\r\n          var faceVertexUvs, idx, l, len1, polygon, ref1, ref2, vIndex, vName, vertex;\r\n          faceVertexUvs = (ref1 = geometry.faceVertexUvs) != null ? ref1[0][i] : void 0;\r\n          if (faceVertexUvs == null) {\r\n            faceVertexUvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];\r\n          }\r\n          polygon = new ThreeBSP.Polygon();\r\n          ref2 = ['a', 'b', 'c', 'd'];\r\n          for (vIndex = l = 0, len1 = ref2.length; l < len1; vIndex = ++l) {\r\n            vName = ref2[vIndex];\r\n            if ((idx = face[vName]) != null) {\r\n              vertex = geometry.vertices[idx];\r\n              vertex = new ThreeBSP.Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[0], new THREE.Vector2(faceVertexUvs[vIndex].x, faceVertexUvs[vIndex].y));\r\n              vertex.applyMatrix4(_this.matrix);\r\n              polygon.vertices.push(vertex);\r\n            }\r\n          }\r\n          return polygons.push(polygon.calculateProperties());\r\n        };\r\n      })(this);\r\n      for (i = k = 0, len = ref.length; k < len; i = ++k) {\r\n        face = ref[i];\r\n        fn1(face, i);\r\n      }\r\n      return new ThreeBSP.Node(polygons, this.options);\r\n    };\r\n\r\n    ThreeBSP.prototype.toMesh = function(material) {\r\n      if (material == null) {\r\n        material = new THREE.MeshNormalMaterial();\r\n      }\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          var geometry, mesh;\r\n          geometry = _this.toGeometry();\r\n          return returning((mesh = new THREE.Mesh(geometry, material)), function() {\r\n            mesh.position.setFromMatrixPosition(_this.matrix);\r\n            return mesh.rotation.setFromRotationMatrix(_this.matrix);\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    ThreeBSP.prototype.toGeometry = function() {\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          var geometry, matrix;\r\n          matrix = new THREE.Matrix4().getInverse(_this.matrix);\r\n          return returning((geometry = new THREE.Geometry()), function() {\r\n            var k, len, polygon, ref, results;\r\n            ref = _this.tree.allPolygons();\r\n            results = [];\r\n            for (k = 0, len = ref.length; k < len; k++) {\r\n              polygon = ref[k];\r\n              results.push(_this.options.timer.doTask(function() {\r\n                var face, idx, l, polyVerts, ref1, results1, v, vertUvs, verts;\r\n                polyVerts = (function() {\r\n                  var l, len1, ref1, results1;\r\n                  ref1 = polygon.vertices;\r\n                  results1 = [];\r\n                  for (l = 0, len1 = ref1.length; l < len1; l++) {\r\n                    v = ref1[l];\r\n                    results1.push(v.clone().applyMatrix4(matrix));\r\n                  }\r\n                  return results1;\r\n                })();\r\n                results1 = [];\r\n                for (idx = l = 2, ref1 = polyVerts.length; 2 <= ref1 ? l < ref1 : l > ref1; idx = 2 <= ref1 ? ++l : --l) {\r\n                  verts = [polyVerts[0], polyVerts[idx - 1], polyVerts[idx]];\r\n                  vertUvs = (function() {\r\n                    var len1, m, ref2, ref3, results2;\r\n                    results2 = [];\r\n                    for (m = 0, len1 = verts.length; m < len1; m++) {\r\n                      v = verts[m];\r\n                      results2.push(new THREE.Vector2((ref2 = v.uv) != null ? ref2.x : void 0, (ref3 = v.uv) != null ? ref3.y : void 0));\r\n                    }\r\n                    return results2;\r\n                  })();\r\n                  face = (function(func, args, ctor) {\r\n                    ctor.prototype = func.prototype;\r\n                    var child = new ctor, result = func.apply(child, args);\r\n                    return Object(result) === result ? result : child;\r\n                  })(THREE.Face3, slice.call((function() {\r\n                    var len1, m, results2;\r\n                    results2 = [];\r\n                    for (m = 0, len1 = verts.length; m < len1; m++) {\r\n                      v = verts[m];\r\n                      results2.push(geometry.vertices.push(v) - 1);\r\n                    }\r\n                    return results2;\r\n                  })()).concat([polygon.normal.clone()]), function(){});\r\n                  geometry.faces.push(face);\r\n                  results1.push(geometry.faceVertexUvs[0].push(vertUvs));\r\n                }\r\n                return results1;\r\n              }));\r\n            }\r\n            return results;\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    ThreeBSP.prototype.subtract = function(other) {\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          return other.withTimer(_this.options.timer, function() {\r\n            var ref, them, us;\r\n            ref = [_this.tree.clone(), other.tree.clone()], us = ref[0], them = ref[1];\r\n            us.invert().clipTo(them);\r\n            them.clipTo(us).invert().clipTo(us).invert();\r\n            return new ThreeBSP(us.build(them.allPolygons()).invert(), _this.matrix, _this.options);\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    ThreeBSP.prototype.union = function(other) {\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          return other.withTimer(_this.options.timer, function() {\r\n            var ref, them, us;\r\n            ref = [_this.tree.clone(), other.tree.clone()], us = ref[0], them = ref[1];\r\n            us.clipTo(them);\r\n            them.clipTo(us).invert().clipTo(us).invert();\r\n            return new ThreeBSP(us.build(them.allPolygons()), _this.matrix, _this.options);\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    ThreeBSP.prototype.intersect = function(other) {\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          return other.withTimer(_this.options.timer, function() {\r\n            var ref, them, us;\r\n            ref = [_this.tree.clone(), other.tree.clone()], us = ref[0], them = ref[1];\r\n            them.clipTo(us.invert()).invert().clipTo(us.clipTo(them));\r\n            return new ThreeBSP(us.build(them.allPolygons()).invert(), _this.matrix, _this.options);\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    return ThreeBSP;\r\n\r\n  })();\r\n\r\n  ThreeBSP.Vertex = (function(superClass) {\r\n    extend(Vertex, superClass);\r\n\r\n    function Vertex(x, y, z, normal, uv) {\r\n      this.normal = normal != null ? normal : new THREE.Vector3();\r\n      this.uv = uv != null ? uv : new THREE.Vector2();\r\n      this.interpolate = bind(this.interpolate, this);\r\n      this.lerp = bind(this.lerp, this);\r\n      Vertex.__super__.constructor.call(this, x, y, z);\r\n    }\r\n\r\n    Vertex.prototype.clone = function() {\r\n      return new ThreeBSP.Vertex(this.x, this.y, this.z, this.normal.clone(), this.uv.clone());\r\n    };\r\n\r\n    Vertex.prototype.lerp = function(v, alpha) {\r\n      return returning(Vertex.__super__.lerp.apply(this, arguments), (function(_this) {\r\n        return function() {\r\n          _this.uv.add(v.uv.clone().sub(_this.uv).multiplyScalar(alpha));\r\n          return _this.normal.lerp(v, alpha);\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Vertex.prototype.interpolate = function() {\r\n      var args, ref;\r\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\r\n      return (ref = this.clone()).lerp.apply(ref, args);\r\n    };\r\n\r\n    return Vertex;\r\n\r\n  })(THREE.Vector3);\r\n\r\n  ThreeBSP.Polygon = (function() {\r\n    function Polygon(vertices, normal, w) {\r\n      this.vertices = vertices != null ? vertices : [];\r\n      this.normal = normal;\r\n      this.w = w;\r\n      this.subdivide = bind(this.subdivide, this);\r\n      this.tessellate = bind(this.tessellate, this);\r\n      this.classifySide = bind(this.classifySide, this);\r\n      this.classifyVertex = bind(this.classifyVertex, this);\r\n      this.invert = bind(this.invert, this);\r\n      this.clone = bind(this.clone, this);\r\n      this.calculateProperties = bind(this.calculateProperties, this);\r\n      if (this.vertices.length) {\r\n        this.calculateProperties();\r\n      }\r\n    }\r\n\r\n    Polygon.prototype.calculateProperties = function() {\r\n      return returning(this, (function(_this) {\r\n        return function() {\r\n          var a, b, c, ref;\r\n          ref = _this.vertices, a = ref[0], b = ref[1], c = ref[2];\r\n          _this.normal = b.clone().sub(a).cross(c.clone().sub(a)).normalize();\r\n          return _this.w = _this.normal.clone().dot(a);\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Polygon.prototype.clone = function() {\r\n      var v;\r\n      return new ThreeBSP.Polygon((function() {\r\n        var k, len, ref, results;\r\n        ref = this.vertices;\r\n        results = [];\r\n        for (k = 0, len = ref.length; k < len; k++) {\r\n          v = ref[k];\r\n          results.push(v.clone());\r\n        }\r\n        return results;\r\n      }).call(this), this.normal.clone(), this.w);\r\n    };\r\n\r\n    Polygon.prototype.invert = function() {\r\n      return returning(this, (function(_this) {\r\n        return function() {\r\n          _this.normal.multiplyScalar(-1);\r\n          _this.w *= -1;\r\n          return _this.vertices.reverse();\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Polygon.prototype.classifyVertex = function(vertex) {\r\n      var side;\r\n      side = this.normal.dot(vertex) - this.w;\r\n      switch (false) {\r\n        case !(side < -EPSILON):\r\n          return BACK;\r\n        case !(side > EPSILON):\r\n          return FRONT;\r\n        default:\r\n          return COPLANAR;\r\n      }\r\n    };\r\n\r\n    Polygon.prototype.classifySide = function(polygon) {\r\n      var back, front, k, len, ref, ref1, tally, v;\r\n      ref = [0, 0], front = ref[0], back = ref[1];\r\n      tally = (function(_this) {\r\n        return function(v) {\r\n          switch (_this.classifyVertex(v)) {\r\n            case FRONT:\r\n              return front += 1;\r\n            case BACK:\r\n              return back += 1;\r\n          }\r\n        };\r\n      })(this);\r\n      ref1 = polygon.vertices;\r\n      for (k = 0, len = ref1.length; k < len; k++) {\r\n        v = ref1[k];\r\n        tally(v);\r\n      }\r\n      if (front > 0 && back === 0) {\r\n        return FRONT;\r\n      }\r\n      if (front === 0 && back > 0) {\r\n        return BACK;\r\n      }\r\n      if ((front === back && back === 0)) {\r\n        return COPLANAR;\r\n      }\r\n      return SPANNING;\r\n    };\r\n\r\n    Polygon.prototype.tessellate = function(poly) {\r\n      var b, count, f, i, j, k, len, polys, ref, ref1, ref2, t, ti, tj, v, vi, vj;\r\n      ref = {\r\n        f: [],\r\n        b: [],\r\n        count: poly.vertices.length\r\n      }, f = ref.f, b = ref.b, count = ref.count;\r\n      if (this.classifySide(poly) !== SPANNING) {\r\n        return [poly];\r\n      }\r\n      ref1 = poly.vertices;\r\n      for (i = k = 0, len = ref1.length; k < len; i = ++k) {\r\n        vi = ref1[i];\r\n        vj = poly.vertices[(j = (i + 1) % count)];\r\n        ref2 = (function() {\r\n          var l, len1, ref2, results;\r\n          ref2 = [vi, vj];\r\n          results = [];\r\n          for (l = 0, len1 = ref2.length; l < len1; l++) {\r\n            v = ref2[l];\r\n            results.push(this.classifyVertex(v));\r\n          }\r\n          return results;\r\n        }).call(this), ti = ref2[0], tj = ref2[1];\r\n        if (ti !== BACK) {\r\n          f.push(vi);\r\n        }\r\n        if (ti !== FRONT) {\r\n          b.push(vi);\r\n        }\r\n        if ((ti | tj) === SPANNING) {\r\n          t = (this.w - this.normal.dot(vi)) / this.normal.dot(vj.clone().sub(vi));\r\n          v = vi.interpolate(vj, t);\r\n          f.push(v);\r\n          b.push(v);\r\n        }\r\n      }\r\n      return returning((polys = []), (function(_this) {\r\n        return function() {\r\n          if (f.length >= 3) {\r\n            polys.push(new ThreeBSP.Polygon(f));\r\n          }\r\n          if (b.length >= 3) {\r\n            return polys.push(new ThreeBSP.Polygon(b));\r\n          }\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Polygon.prototype.subdivide = function(polygon, coplanar_front, coplanar_back, front, back) {\r\n      var k, len, poly, ref, results, side;\r\n      ref = this.tessellate(polygon);\r\n      results = [];\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        poly = ref[k];\r\n        side = this.classifySide(poly);\r\n        switch (side) {\r\n          case FRONT:\r\n            results.push(front.push(poly));\r\n            break;\r\n          case BACK:\r\n            results.push(back.push(poly));\r\n            break;\r\n          case COPLANAR:\r\n            if (this.normal.dot(poly.normal) > 0) {\r\n              results.push(coplanar_front.push(poly));\r\n            } else {\r\n              results.push(coplanar_back.push(poly));\r\n            }\r\n            break;\r\n          default:\r\n            throw new Error(\"BUG: Polygon of classification \" + side + \" in subdivision\");\r\n        }\r\n      }\r\n      return results;\r\n    };\r\n\r\n    return Polygon;\r\n\r\n  })();\r\n\r\n  ThreeBSP.Node = (function() {\r\n    Node.prototype.clone = function() {\r\n      var node;\r\n      return returning((node = new ThreeBSP.Node(this.options)), (function(_this) {\r\n        return function() {\r\n          var ref;\r\n          node.divider = (ref = _this.divider) != null ? ref.clone() : void 0;\r\n          node.polygons = _this.options.timer.doTask(function() {\r\n            var k, len, p, ref1, results;\r\n            ref1 = _this.polygons;\r\n            results = [];\r\n            for (k = 0, len = ref1.length; k < len; k++) {\r\n              p = ref1[k];\r\n              results.push(p.clone());\r\n            }\r\n            return results;\r\n          });\r\n          node.front = _this.options.timer.doTask(function() {\r\n            var ref1;\r\n            return (ref1 = _this.front) != null ? ref1.clone() : void 0;\r\n          });\r\n          return node.back = _this.options.timer.doTask(function() {\r\n            var ref1;\r\n            return (ref1 = _this.back) != null ? ref1.clone() : void 0;\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    function Node(polygons, options) {\r\n      this.options = options != null ? options : {};\r\n      this.clipTo = bind(this.clipTo, this);\r\n      this.clipPolygons = bind(this.clipPolygons, this);\r\n      this.invert = bind(this.invert, this);\r\n      this.allPolygons = bind(this.allPolygons, this);\r\n      this.isConvex = bind(this.isConvex, this);\r\n      this.build = bind(this.build, this);\r\n      this.clone = bind(this.clone, this);\r\n      if ((polygons != null) && !(polygons instanceof Array)) {\r\n        this.options = polygons;\r\n        polygons = void 0;\r\n      }\r\n      this.polygons = [];\r\n      this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          if ((polygons != null) && polygons.length) {\r\n            return _this.build(polygons);\r\n          }\r\n        };\r\n      })(this));\r\n    }\r\n\r\n    Node.prototype.build = function(polygons) {\r\n      return returning(this, (function(_this) {\r\n        return function() {\r\n          var polys, results, side, sides;\r\n          sides = {\r\n            front: [],\r\n            back: []\r\n          };\r\n          if (_this.divider == null) {\r\n            _this.divider = polygons[0].clone();\r\n          }\r\n          _this.options.timer.doTask(function() {\r\n            var k, len, poly, results;\r\n            results = [];\r\n            for (k = 0, len = polygons.length; k < len; k++) {\r\n              poly = polygons[k];\r\n              results.push(_this.options.timer.doTask(function() {\r\n                return _this.divider.subdivide(poly, _this.polygons, _this.polygons, sides.front, sides.back);\r\n              }));\r\n            }\r\n            return results;\r\n          });\r\n          results = [];\r\n          for (side in sides) {\r\n            if (!hasProp.call(sides, side)) continue;\r\n            polys = sides[side];\r\n            if (polys.length) {\r\n              if (_this[side] == null) {\r\n                _this[side] = new ThreeBSP.Node(_this.options);\r\n              }\r\n              results.push(_this[side].build(polys));\r\n            } else {\r\n              results.push(void 0);\r\n            }\r\n          }\r\n          return results;\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Node.prototype.isConvex = function(polys) {\r\n      var inner, k, l, len, len1, outer;\r\n      for (k = 0, len = polys.length; k < len; k++) {\r\n        inner = polys[k];\r\n        for (l = 0, len1 = polys.length; l < len1; l++) {\r\n          outer = polys[l];\r\n          if (inner !== outer && outer.classifySide(inner) !== BACK) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    Node.prototype.allPolygons = function() {\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          var ref, ref1;\r\n          return _this.polygons.slice().concat(((ref1 = _this.front) != null ? ref1.allPolygons() : void 0) || []).concat(((ref = _this.back) != null ? ref.allPolygons() : void 0) || []);\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Node.prototype.invert = function() {\r\n      return returning(this, (function(_this) {\r\n        return function() {\r\n          return _this.options.timer.doTask(function() {\r\n            var flipper, k, l, len, len1, poly, ref, ref1, ref2;\r\n            ref = _this.polygons;\r\n            for (k = 0, len = ref.length; k < len; k++) {\r\n              poly = ref[k];\r\n              _this.options.timer.doTask(function() {\r\n                return poly.invert();\r\n              });\r\n            }\r\n            ref1 = [_this.divider, _this.front, _this.back];\r\n            for (l = 0, len1 = ref1.length; l < len1; l++) {\r\n              flipper = ref1[l];\r\n              _this.options.timer.doTask(function() {\r\n                return flipper != null ? flipper.invert() : void 0;\r\n              });\r\n            }\r\n            return ref2 = [_this.back, _this.front], _this.front = ref2[0], _this.back = ref2[1], ref2;\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Node.prototype.clipPolygons = function(polygons) {\r\n      return this.options.timer.doTask((function(_this) {\r\n        return function() {\r\n          var back, front, k, len, poly;\r\n          if (!_this.divider) {\r\n            return polygons.slice();\r\n          }\r\n          front = [];\r\n          back = [];\r\n          for (k = 0, len = polygons.length; k < len; k++) {\r\n            poly = polygons[k];\r\n            _this.options.timer.doTask(function() {\r\n              return _this.divider.subdivide(poly, front, back, front, back);\r\n            });\r\n          }\r\n          if (_this.front) {\r\n            front = _this.front.clipPolygons(front);\r\n          }\r\n          if (_this.back) {\r\n            back = _this.back.clipPolygons(back);\r\n          }\r\n          if (_this.back) {\r\n            return front.concat(back);\r\n          } else {\r\n            return front;\r\n          }\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    Node.prototype.clipTo = function(node) {\r\n      return returning(this, (function(_this) {\r\n        return function() {\r\n          return _this.options.timer.doTask(function() {\r\n            var ref, ref1;\r\n            _this.polygons = node.clipPolygons(_this.polygons);\r\n            if ((ref = _this.front) != null) {\r\n              ref.clipTo(node);\r\n            }\r\n            return (ref1 = _this.back) != null ? ref1.clipTo(node) : void 0;\r\n          });\r\n        };\r\n      })(this));\r\n    };\r\n\r\n    return Node;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n"]},"metadata":{},"sourceType":"script"}